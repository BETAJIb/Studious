package l2s.gameserver.skills;

import l2s.gameserver.stats.Stats;

public enum SkillTrait
{
	UNK_0(SkillTraitType.NONE, null, null),
	SWORD(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_SWORD, Stats.DEFENCE_TRAIT_SWORD),
	BLUNT(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_BLUNT, Stats.DEFENCE_TRAIT_BLUNT),
	DAGGER(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_DAGGER, Stats.DEFENCE_TRAIT_DAGGER),
	POLE(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_POLE, Stats.DEFENCE_TRAIT_POLE),
	FIST(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_FIST, Stats.DEFENCE_TRAIT_FIST),
	BOW(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_BOW, Stats.DEFENCE_TRAIT_BOW),
	ETC(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_ETC, Stats.DEFENCE_TRAIT_ETC),
	UNK_8(SkillTraitType.NONE, null, null),
	POISON(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_POISON, Stats.DEFENCE_TRAIT_POISON),
	HOLD(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_HOLD, Stats.DEFENCE_TRAIT_HOLD),
	BLEED(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_BLEED, Stats.DEFENCE_TRAIT_BLEED),
	SLEEP(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_SLEEP, Stats.DEFENCE_TRAIT_SLEEP),
	SHOCK(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_SHOCK, Stats.DEFENCE_TRAIT_SHOCK),
	DERANGEMENT(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_DERANGEMENT, Stats.DEFENCE_TRAIT_DERANGEMENT),
	BUG_WEAKNESS(SkillTraitType.WEAKNESS, Stats.ATTACK_TRAIT_BUG_WEAKNESS, Stats.DEFENCE_TRAIT_BUG_WEAKNESS),
	ANIMAL_WEAKNESS(SkillTraitType.WEAKNESS, Stats.ATTACK_TRAIT_ANIMAL_WEAKNESS, Stats.DEFENCE_TRAIT_ANIMAL_WEAKNESS),
	PLANT_WEAKNESS(SkillTraitType.WEAKNESS, Stats.ATTACK_TRAIT_PLANT_WEAKNESS, Stats.DEFENCE_TRAIT_PLANT_WEAKNESS),
	BEAST_WEAKNESS(SkillTraitType.WEAKNESS, Stats.ATTACK_TRAIT_BEAST_WEAKNESS, Stats.DEFENCE_TRAIT_BEAST_WEAKNESS),
	DRAGON_WEAKNESS(SkillTraitType.WEAKNESS, Stats.ATTACK_TRAIT_DRAGON_WEAKNESS, Stats.DEFENCE_TRAIT_DRAGON_WEAKNESS),
	PARALYZE(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_PARALYZE, Stats.DEFENCE_TRAIT_PARALYZE),
	DUAL(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_DUAL, Stats.DEFENCE_TRAIT_DUAL),
	DUALFIST(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_DUALFIST, Stats.DEFENCE_TRAIT_DUALFIST),
	BOSS(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_BOSS, Stats.DEFENCE_TRAIT_BOSS),
	GIANT_WEAKNESS(SkillTraitType.WEAKNESS, Stats.ATTACK_TRAIT_GIANT_WEAKNESS, Stats.DEFENCE_TRAIT_GIANT_WEAKNESS),
	CONSTRUCT_WEAKNESS(SkillTraitType.WEAKNESS, Stats.ATTACK_TRAIT_CONSTRUCT_WEAKNESS, Stats.DEFENCE_TRAIT_CONSTRUCT_WEAKNESS),
	DEATH(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_DEATH, Stats.DEFENCE_TRAIT_DEATH),
	VALAKAS(SkillTraitType.WEAKNESS, Stats.ATTACK_TRAIT_VALAKAS, Stats.DEFENCE_TRAIT_VALAKAS),
	UNK_28(SkillTraitType.WEAKNESS, null, null),
	UNK_29(SkillTraitType.RESISTANCE, null, null),
	ROOT_PHYSICALLY(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_ROOT_PHYSICALLY, Stats.DEFENCE_TRAIT_ROOT_PHYSICALLY),
	UNK_31(SkillTraitType.RESISTANCE, null, null),
	RAPIER(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_RAPIER, Stats.DEFENCE_TRAIT_RAPIER),
	CROSSBOW(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_CROSSBOW, Stats.DEFENCE_TRAIT_CROSSBOW),
	ANCIENTSWORD(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_ANCIENTSWORD, Stats.DEFENCE_TRAIT_ANCIENTSWORD),
	TURN_STONE(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_TURN_STONE, Stats.DEFENCE_TRAIT_TURN_STONE),
	GUST(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_GUST, Stats.DEFENCE_TRAIT_GUST),
	PHYSICAL_BLOCKADE(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_PHYSICAL_BLOCKADE, Stats.DEFENCE_TRAIT_PHYSICAL_BLOCKADE),
	TARGET(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_TARGET, Stats.DEFENCE_TRAIT_TARGET),
	PHYSICAL_WEAKNESS(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_PHYSICAL_WEAKNESS, Stats.DEFENCE_TRAIT_PHYSICAL_WEAKNESS),
	MAGICAL_WEAKNESS(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_MAGICAL_WEAKNESS, Stats.DEFENCE_TRAIT_MAGICAL_WEAKNESS),
	DUALDAGGER(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_DUALDAGGER, Stats.DEFENCE_TRAIT_DUALDAGGER),
	DUALBLUNT(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_DUALBLUNT, Stats.DEFENCE_TRAIT_DUALBLUNT),
	KNOCKBACK(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_KNOCKBACK, Stats.DEFENCE_TRAIT_KNOCKBACK),
	KNOCKDOWN(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_KNOCKDOWN, Stats.DEFENCE_TRAIT_KNOCKDOWN),
	PULL(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_PULL, Stats.DEFENCE_TRAIT_PULL),
	HATE(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_HATE, Stats.DEFENCE_TRAIT_HATE),
	AGGRESSION(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_AGGRESSION, Stats.DEFENCE_TRAIT_AGGRESSION),
	AIRBIND(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_AIRBIND, Stats.DEFENCE_TRAIT_AIRBIND),
	DISARM(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_DISARM, Stats.DEFENCE_TRAIT_DISARM),
	DEPORT(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_DEPORT, Stats.DEFENCE_TRAIT_DEPORT),
	CHANGEBODY(SkillTraitType.RESISTANCE, Stats.ATTACK_TRAIT_CHANGEBODY, Stats.DEFENCE_TRAIT_CHANGEBODY),
	TWOHANDCROSSBOW(SkillTraitType.WEAPON, Stats.ATTACK_TRAIT_TWOHANDCROSSBOW, Stats.DEFENCE_TRAIT_TWOHANDCROSSBOW),
	NONE(SkillTraitType.NONE, null, null);

	public static final SkillTrait[] VALUES = values();

	private final SkillTraitType _type;
	private final Stats _attack;
	private final Stats _defence;

	private SkillTrait(SkillTraitType type, Stats attack, Stats defence)
	{
		_type = type;
		_attack = attack;
		_defence = defence;
	}

	public int getId()
	{
		return ordinal();
	}

	public SkillTraitType getType()
	{
		return _type;
	}

	public Stats getAttack()
	{
		return _attack;
	}

	public Stats getDefence()
	{
		return _defence;
	}
}